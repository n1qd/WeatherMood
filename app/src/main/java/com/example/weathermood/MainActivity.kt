package com.example.weathermood
import com.weatherapp.R
import com.example.weathermood.api.ApiClient
import com.example.weathermood.data.Prefs
import com.example.weathermood.data.db.WeatherMoodDatabase
import com.example.weathermood.data.WeatherResponse
import com.example.weathermood.data.db.MoodRatingEntity
import com.example.weathermood.sync.SyncManager
import com.example.weathermood.auth.UserManager
import com.example.weathermood.data.CityManager


import android.os.Bundle
import android.content.Intent
import android.content.Context
import android.net.ConnectivityManager
import android.net.NetworkCapabilities
import android.util.Log
import android.view.LayoutInflater
import android.view.Menu
import android.view.MenuItem
import android.view.View
import android.widget.ImageButton
import android.widget.LinearLayout
import android.widget.RatingBar
import android.widget.RelativeLayout
import android.widget.TextView
import android.widget.Toast
import androidx.cardview.widget.CardView
import androidx.appcompat.app.ActionBarDrawerToggle
import androidx.appcompat.app.AppCompatActivity
import androidx.core.view.GravityCompat
import androidx.drawerlayout.widget.DrawerLayout
import androidx.swiperefreshlayout.widget.SwipeRefreshLayout    
import com.example.weathermood.api.ApiClient.weatherApi
import com.example.weathermood.api.WeatherApi
import androidx.lifecycle.lifecycleScope
import com.google.android.material.navigation.NavigationView
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import android.widget.ScrollView
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Locale

class MainActivity : AppCompatActivity(), NavigationView.OnNavigationItemSelectedListener {

    private lateinit var swipeRefreshLayout: SwipeRefreshLayout
    private lateinit var database: WeatherMoodDatabase
    private lateinit var syncManager: SyncManager
    private lateinit var drawerLayout: DrawerLayout
    private lateinit var userManager: UserManager
    private lateinit var cityManager: CityManager
    private val TAG = "WeatherApp"
    private var isLoading = false
    private var currentWeather: WeatherResponse? = null
    private var useFahrenheit = false
    private var useMph = false

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        database = WeatherMoodDatabase.get(this)
        syncManager = SyncManager(this)
        userManager = UserManager(this)
        cityManager = CityManager(this)
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        useFahrenheit = Prefs.getUseFahrenheit(this)
        useMph = Prefs.getUseMph(this)
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ–∫–æ–≤–æ–≥–æ –º–µ–Ω—é
        drawerLayout = findViewById(R.id.drawer_layout)
        val navView = findViewById<NavigationView>(R.id.nav_view)
        navView.setNavigationItemSelectedListener(this)
        
        setupNavigationHeader(navView)
        loadUserCitiesIntoMenu(navView)
        setupSwipeRefresh()
        setupUI()
        loadWeatherData()
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
        syncManager.schedulePeriodicSync()
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å Firestore –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        lifecycleScope.launch {
            userManager.syncWithFirestore()
        }
    }
    
    private fun loadUserCitiesIntoMenu(navView: NavigationView) {
        lifecycleScope.launch {
            try {
                val favoriteCities = cityManager.getFavoriteCities()
                
                // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏–∑ header
                val headerView = navView.getHeaderView(0)
                val citiesContainer = headerView.findViewById<LinearLayout>(R.id.citiesContainer)
                citiesContainer.removeAllViews()
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥"
                val addCityView = LayoutInflater.from(this@MainActivity)
                    .inflate(R.layout.nav_city_item, citiesContainer, false)
                val tvAddCity = addCityView.findViewById<TextView>(R.id.tvCityName)
                val btnDeleteAdd = addCityView.findViewById<ImageButton>(R.id.btnDeleteCity)
                
                tvAddCity.text = "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é"
                btnDeleteAdd.visibility = View.GONE // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è "–î–æ–±–∞–≤–∏—Ç—å"
                
                addCityView.setOnClickListener {
                    startActivity(Intent(this@MainActivity, com.example.weathermood.ui.CityPickerActivity::class.java))
                    drawerLayout.closeDrawer(GravityCompat.START)
                }
                citiesContainer.addView(addCityView)
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if (favoriteCities.isEmpty()) {
                    val emptyView = TextView(this@MainActivity)
                    emptyView.text = "–î–æ–±–∞–≤—å—Ç–µ –≥–æ—Ä–æ–¥"
                    emptyView.setTextColor(getColor(android.R.color.white))
                    emptyView.alpha = 0.6f
                    emptyView.setPadding(16, 16, 16, 16)
                    citiesContainer.addView(emptyView)
                } else {
                    favoriteCities.forEach { city ->
                        val cityView = LayoutInflater.from(this@MainActivity)
                            .inflate(R.layout.nav_city_item, citiesContainer, false)
                        
                        val tvCityName = cityView.findViewById<TextView>(R.id.tvCityName)
                        val btnDelete = cityView.findViewById<ImageButton>(R.id.btnDeleteCity)
                        
                        val displayName = city.cityName.split(",")[0].trim()
                        val icon = if (city.isDefault) "‚≠ê" else "üìç"
                        tvCityName.text = "$icon $displayName"
                        
                        // –ö–ª–∏–∫ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ - –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞
                        cityView.setOnClickListener {
                            Prefs.setSelectedCity(this@MainActivity, displayName)
                            loadWeatherData()
                            Toast.makeText(this@MainActivity, "–í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥: $displayName", Toast.LENGTH_SHORT).show()
                            drawerLayout.closeDrawer(GravityCompat.START)
                        }
                        
                        // –ö–ª–∏–∫ –Ω–∞ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è
                        btnDelete.setOnClickListener {
                            showDeleteCityDialog(city.id, displayName)
                        }
                        
                        citiesContainer.addView(cityView)
                    }
                }
                
            } catch (e: Exception) {
                Log.e(TAG, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ—Ä–æ–¥–æ–≤: ${e.message}", e)
            }
        }
    }
    
    private fun showDeleteCityDialog(cityId: Int, cityName: String) {
        androidx.appcompat.app.AlertDialog.Builder(this)
            .setTitle("–£–¥–∞–ª–∏—Ç—å –≥–æ—Ä–æ–¥?")
            .setMessage("–£–¥–∞–ª–∏—Ç—å $cityName –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ?")
            .setPositiveButton("–£–¥–∞–ª–∏—Ç—å") { _, _ ->
                lifecycleScope.launch {
                    try {
                        cityManager.removeFavoriteCity(cityId)
                        Toast.makeText(this@MainActivity, "$cityName —É–¥–∞–ª–µ–Ω", Toast.LENGTH_SHORT).show()
                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤
                        val navView = findViewById<NavigationView>(R.id.nav_view)
                        loadUserCitiesIntoMenu(navView)
                    } catch (e: Exception) {
                        Toast.makeText(this@MainActivity, "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ${e.message}", Toast.LENGTH_SHORT).show()
                    }
                }
            }
            .setNegativeButton("–û—Ç–º–µ–Ω–∞", null)
            .show()
    }
    
    private fun setupNavigationHeader(navView: NavigationView) {
        val headerView = navView.getHeaderView(0)
        val btnAuthCard = headerView.findViewById<CardView>(R.id.btnAuthCard)
        val tvUserName = headerView.findViewById<TextView>(R.id.tvUserName)
        val tvUserEmail = headerView.findViewById<TextView>(R.id.tvUserEmail)
        val tvAuthButton = headerView.findViewById<TextView>(R.id.tvAuthButton)
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        updateUserUI(tvUserName, tvUserEmail, tvAuthButton)
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        btnAuthCard.setOnClickListener {
            val currentUser = userManager.getCurrentUser()
            if (currentUser != null && !currentUser.isAnonymous) {
                // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã—Ö–æ–¥–∞
                showLogoutDialog()
            } else {
                // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –æ—Ç–∫—Ä—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –≤—Ö–æ–¥–∞
                startActivity(Intent(this, com.example.weathermood.ui.LoginActivity::class.java))
            }
            drawerLayout.closeDrawer(GravityCompat.START)
        }
    }
    
    private fun updateUserUI(tvUserName: TextView, tvUserEmail: TextView, tvAuthButton: TextView) {
        val currentUser = userManager.getCurrentUser()
        
        if (currentUser != null && !currentUser.isAnonymous) {
            // –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            tvUserName.text = currentUser.displayName
            tvUserEmail.text = currentUser.email ?: "–ù–µ—Ç email"
            tvAuthButton.text = "–í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞"
        } else {
            // –ì–æ—Å—Ç—å –∏–ª–∏ –∞–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            tvUserName.text = "–ì–æ—Å—Ç—å"
            tvUserEmail.text = "–í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç"
            tvAuthButton.text = "–í–æ–π—Ç–∏ / –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"
        }
    }
    
    private fun showLogoutDialog() {
        androidx.appcompat.app.AlertDialog.Builder(this)
            .setTitle("–í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞")
            .setMessage("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?")
            .setPositiveButton("–í—ã–π—Ç–∏") { _, _ ->
                lifecycleScope.launch {
                    userManager.logout()
                    Toast.makeText(this@MainActivity, "–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞", Toast.LENGTH_SHORT).show()
                    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
                    recreate()
                }
            }
            .setNegativeButton("–û—Ç–º–µ–Ω–∞", null)
            .show()
    }

    private fun setupSwipeRefresh() {
        val scrollView = findViewById<ScrollView>(R.id.scrollView)
        swipeRefreshLayout = findViewById(R.id.swipeRefreshLayout)
        
        // –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º, –∫–æ–≥–¥–∞ SwipeRefresh –º–æ–∂–µ—Ç –±—ã—Ç—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
        swipeRefreshLayout.setOnChildScrollUpCallback { parent, child ->
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º true, –µ—Å–ª–∏ ScrollView –º–æ–∂–µ—Ç –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞—Ç—å—Å—è –≤–≤–µ—Ä—Ö (—Ç.–µ. –Ω–µ –≤ –≤–µ—Ä—Ö–Ω–µ–π –ø–æ–∑–∏—Ü–∏–∏)
            // –ï—Å–ª–∏ true - SwipeRefresh –æ—Ç–∫–ª—é—á–µ–Ω, –µ—Å–ª–∏ false - SwipeRefresh —Ä–∞–±–æ—Ç–∞–µ—Ç
            scrollView.scrollY > 0
        }
        
        swipeRefreshLayout.setOnRefreshListener {
            Log.d(TAG, "üîÑ –°–≤–∞–π–ø –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω")
            loadWeatherData()
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏
        swipeRefreshLayout.setColorSchemeResources(
            android.R.color.holo_blue_bright,
            android.R.color.holo_green_light,
            android.R.color.holo_orange_light,
            android.R.color.holo_red_light
        )
    }

    private fun setupUI() {
        // –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –±–æ–∫–æ–≤–æ–≥–æ –º–µ–Ω—é
        findViewById<ImageButton>(R.id.btnMenu).setOnClickListener {
            drawerLayout.openDrawer(GravityCompat.START)
        }

        findViewById<ImageButton>(R.id.btnSearch).setOnClickListener {
            startActivity(Intent(this, com.example.weathermood.ui.CityPickerActivity::class.java))
        }

        // –ö–ª–∏–∫ –Ω–∞ –≤–∏–¥–∂–µ—Ç –ø–æ–≥–æ–¥—ã –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π
        findViewById<CardView>(R.id.weatherCard).setOnClickListener {
            currentWeather?.let { weather ->
                showWeatherDetailsDialog(weather)
            }
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ RatingBar –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
        val ratingBar = findViewById<RatingBar>(R.id.ratingMood)
        ratingBar.setOnRatingBarChangeListener { _, rating, fromUser ->
            if (fromUser && rating > 0) {
                saveMoodRating(rating)
                val moodText = when (rating.toInt()) {
                    1 -> "üò¢ –û—á–µ–Ω—å –ø–ª–æ—Ö–æ"
                    2 -> "‚òπÔ∏è –ü–ª–æ—Ö–æ"
                    3 -> "üòê –ù–æ—Ä–º–∞–ª—å–Ω–æ"
                    4 -> "üòä –•–æ—Ä–æ—à–æ"
                    5 -> "ü§© –û—Ç–ª–∏—á–Ω–æ!"
                    else -> "–°–ø–∞—Å–∏–±–æ!"
                }
                Toast.makeText(this, "$moodText - –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!", Toast.LENGTH_SHORT).show()
            }
        }

        setCurrentDate()
        showLoadingMessage()
    }

    private fun setCurrentDate() {
        try {
            val currentDate = SimpleDateFormat("EEEE, d MMMM yyyy", Locale("ru"))
                .format(Date())
            findViewById<TextView>(R.id.tvDate).text = currentDate
        } catch (e: Exception) {
            findViewById<TextView>(R.id.tvDate).text = "–°–µ–≥–æ–¥–Ω—è"
        }
    }

    private fun showLoadingMessage() {
        findViewById<TextView>(R.id.tvCity).text = "–ó–∞–≥—Ä—É–∑–∫–∞..."
        findViewById<TextView>(R.id.tvTemperature).text = "--¬∞"
        findViewById<TextView>(R.id.tvWeatherCondition).text = "–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ..."
        findViewById<TextView>(R.id.tvFeelsLike).text = "–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ --¬∞"
        findViewById<TextView>(R.id.tvWind).text = "–í–µ—Ç–µ—Ä: -- –º/—Å"
        findViewById<TextView>(R.id.tvHumidity).text = "–í–ª–∞–∂–Ω–æ—Å—Ç—å: --%"
        findViewById<TextView>(R.id.tvPrecipitation).text = "-- hPa"
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
     */
    private fun isNetworkAvailable(): Boolean {
        val connectivityManager = getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager
        val network = connectivityManager.activeNetwork ?: return false
        val capabilities = connectivityManager.getNetworkCapabilities(network) ?: return false
        
        return capabilities.hasCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET) &&
               capabilities.hasCapability(NetworkCapabilities.NET_CAPABILITY_VALIDATED)
    }

    private fun loadWeatherData() {
        Log.d(TAG, "=== –ù–ê–ß–ê–õ–û –ó–ê–ì–†–£–ó–ö–ò –î–ê–ù–ù–´–• ===")
        
        // –ï—Å–ª–∏ —É–∂–µ –∏–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞, –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ
        if (isLoading) {
            Log.d(TAG, "‚ö†Ô∏è –ó–∞–≥—Ä—É–∑–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            swipeRefreshLayout.isRefreshing = false
            return
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
        if (!isNetworkAvailable()) {
            Log.e(TAG, "‚ùå –ù–ï–¢ –ò–ù–¢–ï–†–ù–ï–¢-–°–û–ï–î–ò–ù–ï–ù–ò–Ø")
            swipeRefreshLayout.isRefreshing = false
            Toast.makeText(this, "–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ç–∏.", Toast.LENGTH_LONG).show()
            findViewById<TextView>(R.id.tvCity).text = "–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"
            findViewById<TextView>(R.id.tvWeatherCondition).text = "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç"
            tryLoadFromCache()
            return
        }

        isLoading = true
        lifecycleScope.launch(Dispatchers.IO) {
            try {
                val selectedCity = Prefs.getSelectedCity(this@MainActivity, Constants.DEFAULT_CITY)
                Log.d(TAG, "1. –í—ã–∑—ã–≤–∞–µ–º API –¥–ª—è –≥–æ—Ä–æ–¥–∞: $selectedCity")
                Log.d(TAG, "   API Key: ${Constants.API_KEY.take(8)}...")

                val httpResponse = kotlinx.coroutines.withTimeout(30000) { // –£–≤–µ–ª–∏—á–µ–Ω —Ç–∞–π–º–∞—É—Ç –¥–æ 30 —Å–µ–∫—É–Ω–¥
                    ApiClient.weatherApi.getWeather(
                        city = selectedCity,
                    apiKey = Constants.API_KEY
                    )
                }

                Log.d(TAG, "HTTP code getWeather: ${'$'}{httpResponse.code()} success=${'$'}{httpResponse.isSuccessful}")
                if (!httpResponse.isSuccessful) {
                    val code = httpResponse.code()
                    val body = httpResponse.errorBody()?.string()
                    Log.e(TAG, "HTTP ${'$'}code –ø—Ä–∏ getWeather, errorBody=${'$'}body")
                    throw RuntimeException("Weather HTTP ${'$'}code")
                }

                val response = httpResponse.body() ?: throw RuntimeException("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç getWeather")

                Log.d(TAG, "2. ‚úÖ –û–¢–í–ï–¢ –û–¢ API –ü–û–õ–£–ß–ï–ù!")
                Log.d(TAG, "   - –ì–æ—Ä–æ–¥: ${'$'}{response.cityName}")
                Log.d(TAG, "   - –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${'$'}{response.main.temp}¬∞C")
                Log.d(TAG, "   - –ü–æ–≥–æ–¥–∞: ${'$'}{response.weather.firstOrNull()?.main}")
                Log.d(TAG, "   - –û–ø–∏—Å–∞–Ω–∏–µ: ${'$'}{response.weather.firstOrNull()?.description}")
                Log.d(TAG, "   - –í–ª–∞–∂–Ω–æ—Å—Ç—å: ${'$'}{response.main.humidity}%")
                Log.d(TAG, "   - –í–µ—Ç–µ—Ä: ${'$'}{response.wind.speed} –º/—Å")

                withContext(Dispatchers.Main) {
                    Log.d(TAG, "3. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –≥–ª–∞–≤–Ω—ã–π –ø–æ—Ç–æ–∫...")
                    swipeRefreshLayout.isRefreshing = false
                    updateUIWithWeatherData(response)
                    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –ø–æ—á–∞—Å–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã
                    setupRealHourlyForecast()
                    Toast.makeText(this@MainActivity, "–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã! ‚úÖ", Toast.LENGTH_SHORT).show()
                    Log.d(TAG, "4. ‚úÖ –ò–ù–¢–ï–†–§–ï–ô–° –û–ë–ù–û–í–õ–ï–ù!")
                }

            } catch (e: Exception) {
                // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫ —Å–µ—Ç–∏/–ø–∞—Ä—Å–∏–Ω–≥–∞
                val rootMsg = e.message ?: e.toString()
                Log.e(TAG, "‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –ó–ê–ü–†–û–°–ï –ü–û–ì–û–î–´: $rootMsg", e)
                
                val errorMessage = when (e) {
                    is retrofit2.HttpException -> {
                        val code = e.code()
                        val body = try { e.response()?.errorBody()?.string() } catch (_: Exception) { null }
                        Log.e(TAG, "HTTP $code, errorBody=$body")
                        when (code) {
                            401 -> "–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á"
                            404 -> "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"
                            429 -> "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤"
                            else -> "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: $code"
                        }
                    }
                    is kotlinx.coroutines.TimeoutCancellationException -> {
                        Log.e(TAG, "–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ (30 —Å–µ–∫)")
                        "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"
                    }
                    is java.net.UnknownHostException -> {
                        Log.e(TAG, "–ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –∏–ª–∏ DNS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                        "–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É"
                    }
                    is java.net.SocketTimeoutException -> {
                        Log.e(TAG, "–¢–∞–π–º–∞—É—Ç —Å–æ–∫–µ—Ç–∞")
                        "–ú–µ–¥–ª–µ–Ω–Ω–æ–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"
                    }
                    is com.google.gson.JsonSyntaxException -> {
                        Log.e(TAG, "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: ${e.localizedMessage}")
                        "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö"
                    }
                    else -> {
                        Log.e(TAG, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: ${e.javaClass.simpleName}")
                        "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–≥–æ–¥—É"
                    }
                }

                withContext(Dispatchers.Main) {
                    swipeRefreshLayout.isRefreshing = false
                    Toast.makeText(this@MainActivity, errorMessage, Toast.LENGTH_LONG).show()
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
                    findViewById<TextView>(R.id.tvCity).text = "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏"
                    findViewById<TextView>(R.id.tvWeatherCondition).text = errorMessage
                    
                    // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –∫—ç—à–∞
                    tryLoadFromCache()
                }
            }
            finally {
                isLoading = false
            }
        }
    }

    private fun updateUIWithWeatherData(weather: WeatherResponse) {
        try {
            Log.d(TAG, "=== –û–ë–ù–û–í–õ–ï–ù–ò–ï –ò–ù–¢–ï–†–§–ï–ô–°–ê ===")

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É
            currentWeather = weather
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ–Ω –∏ –∏–∫–æ–Ω–∫—É –ø–æ–≥–æ–¥—ã
            updateWeatherBackground(weather)

            // –ì–æ—Ä–æ–¥ –∏ —Å—Ç—Ä–∞–Ω–∞ (–ø–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω—É –∏–∑ sys.country –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
            val country = weather.sys?.country ?: ""
            val countryName = when(country) {
                "RU" -> "–†–æ—Å—Å–∏—è"
                "US" -> "–°–®–ê"
                "GB" -> "–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è"
                "DE" -> "–ì–µ—Ä–º–∞–Ω–∏—è"
                "FR" -> "–§—Ä–∞–Ω—Ü–∏—è"
                "IT" -> "–ò—Ç–∞–ª–∏—è"
                "ES" -> "–ò—Å–ø–∞–Ω–∏—è"
                "CN" -> "–ö–∏—Ç–∞–π"
                "JP" -> "–Ø–ø–æ–Ω–∏—è"
                "KR" -> "–ö–æ—Ä–µ—è"
                "UA" -> "–£–∫—Ä–∞–∏–Ω–∞"
                "BY" -> "–ë–µ–ª–∞—Ä—É—Å—å"
                "KZ" -> "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω"
                else -> country
            }
            findViewById<TextView>(R.id.tvCity).text = if (countryName.isNotEmpty()) {
                "${weather.cityName}, $countryName"
            } else {
                weather.cityName
            }
            
            // –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π F/C
            val temp = if (useFahrenheit) celsiusToFahrenheit(weather.main.temp) else weather.main.temp
            val feelsLike = if (useFahrenheit) celsiusToFahrenheit(weather.main.feelsLike) else weather.main.feelsLike
            val unit = if (useFahrenheit) "¬∞F" else "¬∞C"
            
            findViewById<TextView>(R.id.tvTemperature).text = "${temp.toInt()}$unit"
            findViewById<TextView>(R.id.tvFeelsLike).text = "–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ ${feelsLike.toInt()}$unit"

            // –ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è (–±–µ–∑ —ç–º–æ–¥–∑–∏)
            val weatherCondition = weather.weather.firstOrNull()
            if (weatherCondition != null) {
                val conditionText = when(weatherCondition.main.lowercase()) {
                    "clear" -> "–Ø—Å–Ω–æ"
                    "clouds" -> "–û–±–ª–∞—á–Ω–æ"
                    "rain" -> "–î–æ–∂–¥—å"
                    "snow" -> "–°–Ω–µ–≥"
                    "thunderstorm" -> "–ì—Ä–æ–∑–∞"
                    "drizzle" -> "–ú–æ—Ä–æ—Å—å"
                    else -> weatherCondition.description ?: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                }
                findViewById<TextView>(R.id.tvWeatherCondition).text = conditionText.replaceFirstChar { if (it.isLowerCase()) it.titlecase(Locale.getDefault()) else it.toString() }
            }

            // –í–ª–∞–∂–Ω–æ—Å—Ç—å, –≤–µ—Ç–µ—Ä –∏ –¥–∞–≤–ª–µ–Ω–∏–µ (–±–µ–∑ —ç–º–æ–¥–∑–∏)
            findViewById<TextView>(R.id.tvHumidity).text = "–í–ª–∞–∂–Ω–æ—Å—Ç—å: ${weather.main.humidity}%"
            
            // –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ —Å —É—á–µ—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫
            val windSpeed = if (useMph) {
                val mph = weather.wind.speed * 2.23694  // –º/—Å –≤ –º–∏–ª—å/—á
                String.format("%.1f", mph) + " –º–∏–ª—å/—á"
            } else {
                String.format("%.1f", weather.wind.speed) + " –º/—Å"
            }
            findViewById<TextView>(R.id.tvWind).text = "–í–µ—Ç–µ—Ä: $windSpeed"
            
            findViewById<TextView>(R.id.tvPrecipitation).text = "${weather.main.pressure} hPa"

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–≤–µ—Ç—ã
            generateAdvice(weather)

            // –ü–æ—á–∞—Å–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç–¥–µ–ª—å–Ω–æ

            Log.d(TAG, "=== –ò–ù–¢–ï–†–§–ï–ô–° –£–°–ü–ï–®–ù–û –û–ë–ù–û–í–õ–ï–ù ===")

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –û–ë–ù–û–í–õ–ï–ù–ò–ò –ò–ù–¢–ï–†–§–ï–ô–°–ê: ${e.message}", e)
            Toast.makeText(this, "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞", Toast.LENGTH_SHORT).show()
        }
    }
    
    private fun celsiusToFahrenheit(celsius: Double): Double {
        return celsius * 9 / 5 + 32
    }
    
    private fun updateWeatherBackground(weather: WeatherResponse) {
        try {
            val weatherCondition = weather.weather.firstOrNull()?.main?.lowercase() ?: "default"
            val weatherCardBackground = findViewById<RelativeLayout>(R.id.weatherCardBackground)
            val weatherIconLarge = findViewById<TextView>(R.id.tvWeatherIconLarge)
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ–Ω –∏ –∏–∫–æ–Ω–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–≥–æ–¥—ã
            val (backgroundRes, iconText) = when (weatherCondition) {
                "clear" -> {
                    Pair(R.drawable.anim_weather_clear, "‚òÄÔ∏è")
                }
                "clouds" -> {
                    Pair(R.drawable.anim_weather_clouds, "‚òÅÔ∏è")
                }
                "rain", "drizzle" -> {
                    Pair(R.drawable.anim_weather_rain, "üåßÔ∏è")
                }
                "snow" -> {
                    Pair(R.drawable.anim_weather_snow, "‚ùÑÔ∏è")
                }
                "thunderstorm" -> {
                    Pair(R.drawable.anim_weather_thunderstorm, "‚õàÔ∏è")
                }
                else -> {
                    Pair(R.drawable.anim_weather_default, "üå§Ô∏è")
                }
            }
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ–Ω
            weatherCardBackground.setBackgroundResource(backgroundRes)
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Ñ–æ–Ω–∞
            val background = weatherCardBackground.background
            if (background is android.graphics.drawable.AnimationDrawable) {
                background.start()
            }
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫—É
            weatherIconLarge.text = iconText
            
            // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏
            weatherIconLarge.alpha = 0f
            weatherIconLarge.scaleX = 0.5f
            weatherIconLarge.scaleY = 0.5f
            weatherIconLarge.animate()
                .alpha(0.5f)
                .scaleX(1f)
                .scaleY(1f)
                .setDuration(800)
                .withEndAction {
                    // –ü–æ—Å–ª–µ –ø–æ—è–≤–ª–µ–Ω–∏—è –∑–∞–ø—É—Å–∫–∞–µ–º –ø—É–ª—å—Å–∞—Ü–∏—é
                    startIconPulseAnimation(weatherIconLarge)
                }
                .start()
            
            Log.d(TAG, "–§–æ–Ω –ø–æ–≥–æ–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω: $weatherCondition -> $iconText")
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞ –ø–æ–≥–æ–¥—ã: ${e.message}", e)
        }
    }
    
    private fun startIconPulseAnimation(view: TextView) {
        // –°–æ–∑–¥–∞–µ–º –ø—É–ª—å—Å–∏—Ä—É—é—â—É—é –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è –∏–∫–æ–Ω–∫–∏
        view.animate()
            .scaleX(1.08f)
            .scaleY(1.08f)
            .alpha(0.6f)
            .setDuration(2500)
            .withEndAction {
                view.animate()
                    .scaleX(1f)
                    .scaleY(1f)
                    .alpha(0.5f)
                    .setDuration(2500)
                    .withEndAction {
                        // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
                        startIconPulseAnimation(view)
                    }
                    .start()
            }
            .start()
    }

    private fun generateAdvice(weather: WeatherResponse) {
        try {
            val temp = weather.main.temp.toInt()
            val condition = weather.weather.firstOrNull()?.main?.lowercase() ?: ""
            val windSpeed = weather.wind.speed
            
            // –°–æ–≤–µ—Ç—ã –ø–æ –æ–¥–µ–∂–¥–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∏ —É—Å–ª–æ–≤–∏–π
        val clothingAdvice = when {
                temp < -10 -> "–û—á–µ–Ω—å —Ö–æ–ª–æ–¥–Ω–æ! –ù–∞–¥–µ–Ω—å—Ç–µ —Ç–µ–ø–ª—É—é –∑–∏–º–Ω—é—é –∫—É—Ä—Ç–∫—É, —à–∞–ø–∫—É, —à–∞—Ä—Ñ –∏ –ø–µ—Ä—á–∞—Ç–∫–∏ ‚ùÑÔ∏è"
                temp < 0 -> "–•–æ–ª–æ–¥–Ω–æ! –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∏–º–Ω—è—è –∫—É—Ä—Ç–∫–∞ –∏ —Ç–µ–ø–ª—ã–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã üß•"
                temp < 10 -> "–ü—Ä–æ—Ö–ª–∞–¥–Ω–æ. –ù–∞–¥–µ–Ω—å—Ç–µ –ª–µ–≥–∫—É—é –∫—É—Ä—Ç–∫—É –∏–ª–∏ —Å–≤–∏—Ç–µ—Ä üß£"
                temp < 20 -> "–ö–æ–º—Ñ–æ—Ä—Ç–Ω–∞—è –ø–æ–≥–æ–¥–∞. –ü–æ–¥–æ–π–¥–µ—Ç –ª–µ–≥–∫–∞—è –∫–æ—Ñ—Ç–∞ –∏–ª–∏ —Ä—É–±–∞—à–∫–∞ üëî"
                temp < 25 -> "–¢–µ–ø–ª–æ! –ú–æ–∂–Ω–æ –Ω–∞–¥–µ—Ç—å —Ñ—É—Ç–±–æ–ª–∫—É –∏–ª–∏ –ª–µ–≥–∫—É—é –±–ª—É–∑–∫—É üëï"
                else -> "–ñ–∞—Ä–∫–æ! –õ–µ–≥–∫–∞—è –æ–¥–µ–∂–¥–∞ –∏ –Ω–µ –∑–∞–±—É–¥—å—Ç–µ —Å–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–Ω—ã–π –∫—Ä–µ–º ‚òÄÔ∏è"
            }
            
            val additionalClothing = when {
                condition.contains("rain") || condition.contains("drizzle") -> " –í–æ–∑—å–º–∏—Ç–µ –∑–æ–Ω—Ç! ‚òÇÔ∏è"
                condition.contains("snow") -> " –ù–µ –∑–∞–±—É–¥—å—Ç–µ —Ç–µ–ø–ª—ã–µ –±–æ—Ç–∏–Ω–∫–∏! ü•æ"
                windSpeed > 5 -> " –í–µ—Ç—Ä–µ–Ω–æ, –≤–æ–∑—å–º–∏—Ç–µ –≤–µ—Ç—Ä–æ–≤–∫—É! üå¨Ô∏è"
                else -> ""
            }
            
            findViewById<TextView>(R.id.tvClothingAdvice).text = clothingAdvice + additionalClothing
            
            // –≠–∫–æ-—Å–æ–≤–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–≥–æ–¥—ã
        val ecoAdvice = when {
                condition.contains("clear") && temp in 15..25 -> 
                    "–û—Ç–ª–∏—á–Ω–∞—è –ø–æ–≥–æ–¥–∞ –¥–ª—è –≤–µ–ª–æ–ø—Ä–æ–≥—É–ª–∫–∏! –û—Å—Ç–∞–≤—å—Ç–µ –º–∞—à–∏–Ω—É –¥–æ–º–∞ üö¥"
                condition.contains("rain") -> 
                    "–î–æ–∂–¥–µ–≤–∞—è –≤–æ–¥–∞ –æ—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø–æ–ª–∏–≤–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π. –°–æ–±–µ—Ä–∏—Ç–µ –µ—ë! üåßÔ∏èüíß"
                temp > 25 -> 
                    "–ñ–∞—Ä–∫–∏–π –¥–µ–Ω—å! –≠–∫–æ–Ω–æ–º—å—Ç–µ —ç–Ω–µ—Ä–≥–∏—é - –≤—ã–∫–ª—é—á–∞–π—Ç–µ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä –∫–æ–≥–¥–∞ —É—Ö–æ–¥–∏—Ç–µ ‚ùÑÔ∏èüí°"
                temp < 5 -> 
                    "–•–æ–ª–æ–¥–Ω–æ! –£—Ç–µ–ø–ª–∏—Ç–µ –æ–∫–Ω–∞, —á—Ç–æ–±—ã —ç–∫–æ–Ω–æ–º–∏—Ç—å —Ç–µ–ø–ª–æ üè†‚ôªÔ∏è"
                windSpeed > 10 -> 
                    "–°–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä! –û—Ç–ª–∏—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –≤–µ—Ç—Ä—è–Ω—ã—Ö —ç–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏–π üå¨Ô∏è‚ö°"
                condition.contains("clouds") -> 
                    "–ü–∞—Å–º—É—Ä–Ω–æ, –Ω–æ —ç—Ç–æ –Ω–µ –ø–æ–º–µ—Ö–∞ –¥–ª—è –ø—Ä–æ–≥—É–ª–∫–∏ –ø–µ—à–∫–æ–º –≤–º–µ—Å—Ç–æ –ø–æ–µ–∑–¥–∫–∏ –Ω–∞ –∞–≤—Ç–æ üö∂"
                else -> 
                    "–°–µ–≥–æ–¥–Ω—è –æ—Ç–ª–∏—á–Ω–∞—è –ø–æ–≥–æ–¥–∞ –¥–ª—è –ø—Ä–æ–≥—É–ª–∫–∏ –Ω–∞ –ø—Ä–∏—Ä–æ–¥–µ! –ù–∞—Å–ª–∞–¥–∏—Ç–µ—Å—å —Å–≤–µ–∂–∏–º –≤–æ–∑–¥—É—Ö–æ–º üå≥"
            }
            
        findViewById<TextView>(R.id.tvEcoAdvice).text = ecoAdvice

            Log.d(TAG, "–°–æ–≤–µ—Ç—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–≤–µ—Ç–æ–≤: ${e.message}", e)
            findViewById<TextView>(R.id.tvClothingAdvice)?.text = "–û–¥–µ–Ω—å—Ç–µ—Å—å –ø–æ –ø–æ–≥–æ–¥–µ! üëî"
            findViewById<TextView>(R.id.tvEcoAdvice)?.text = "–ë–µ—Ä–µ–≥–∏—Ç–µ –ø—Ä–∏—Ä–æ–¥—É! ‚ôªÔ∏è"
        }
    }

    private fun setupHourlyForecast(weather: WeatherResponse) {
        val layout = findViewById<LinearLayout>(R.id.layoutHourlyForecast)
        layout.removeAllViews()
        val currentIcon = "‚õÖ" // –≤—Ä–µ–º–µ–Ω–Ω–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–∫–æ–Ω–∫–∞

        // –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—á–∞—Å–æ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã
        val baseTemp = weather.main.temp.toInt()
        val hours = listOf( // —Å—Ç—Ä–æ—á–Ω–∞—è "l" –≤–º–µ—Å—Ç–æ "L"
            ForecastHour("–°–µ–π—á–∞—Å", baseTemp, currentIcon),
            ForecastHour("1 —á", baseTemp + 1, currentIcon),
            ForecastHour("2 —á", baseTemp, currentIcon),
            ForecastHour("3 —á", baseTemp - 1, "üåô"),        
            ForecastHour("4 —á", baseTemp - 2, "üåô"),
            ForecastHour("5 —á", baseTemp - 3, "üåô")
        )

        hours.forEach { forecast ->
            val hourView = LayoutInflater.from(this).inflate(
                R.layout.item_hourly_forecast,
                layout,
                false
            )

            hourView.findViewById<TextView>(R.id.tvTime).text = forecast.time
            hourView.findViewById<TextView>(R.id.tvHourlyTemp).text = "${forecast.temperature}¬∞C"
            hourView.findViewById<TextView>(R.id.tvWeatherIcon).text = forecast.icon

            layout.addView(hourView)
        }

        Log.d(TAG, "–ü–æ—á–∞—Å–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω")
    }

    private fun setupDemoHourlyForecast() {
        val layout = findViewById<LinearLayout>(R.id.layoutHourlyForecast)
        layout.removeAllViews()

        val demoHours = listOf(
            ForecastHour("–°–µ–π—á–∞—Å", 21, "‚õÖ"),
            ForecastHour("1 —á", 22, "‚õÖ"),
            ForecastHour("2 —á", 20, "üå§Ô∏è"),
            ForecastHour("3 —á", 19, "üåô"),
            ForecastHour("4 —á", 18, "üåô"),
            ForecastHour("5 —á", 17, "üåô")
        )

        demoHours.forEach { forecast ->
            val hourView = LayoutInflater.from(this).inflate(
                R.layout.item_hourly_forecast,
                layout,
                false
            )

            hourView.findViewById<TextView>(R.id.tvTime).text = forecast.time
            hourView.findViewById<TextView>(R.id.tvHourlyTemp).text = "${forecast.temperature}¬∞C"
            hourView.findViewById<TextView>(R.id.tvWeatherIcon).text = forecast.icon

            layout.addView(hourView)
        }
    }

    private fun setupRealHourlyForecast() {
        val layout = findViewById<LinearLayout>(R.id.layoutHourlyForecast)
        layout.removeAllViews()

        lifecycleScope.launch(Dispatchers.IO) {
            try {
                val selectedCity = Prefs.getSelectedCity(this@MainActivity)
                val httpResponse = kotlinx.coroutines.withTimeout(10000) {
                    weatherApi.getHourlyForecast(
                    city = selectedCity,
                    apiKey = Constants.API_KEY
                    )
                }
                Log.d(TAG, "HTTP code forecast: ${'$'}{httpResponse.code()} success=${'$'}{httpResponse.isSuccessful}")
                if (!httpResponse.isSuccessful) {
                    val code = httpResponse.code()
                    val body = httpResponse.errorBody()?.string()
                    Log.e(TAG, "HTTP ${'$'}code –ø—Ä–∏ getHourlyForecast, errorBody=${'$'}body")
                    throw RuntimeException("Forecast HTTP ${'$'}code")
                }
                val response = httpResponse.body() ?: throw RuntimeException("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç forecast")

                // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –±—É–¥—É—â–∏–µ —á–∞—Å—ã
                val now = System.currentTimeMillis() / 1000
                Log.d(TAG, "–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (unix): $now")
                
                val forecastItems = response.list
                    .also { list -> 
                        Log.d(TAG, "–í—Å–µ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: ${list.size}")
                        list.take(3).forEach { 
                            Log.d(TAG, "–ü—Ä–æ–≥–Ω–æ–∑: dt=${it.dt}, now=$now, —Ä–∞–∑–Ω–∏—Ü–∞=${it.dt - now} —Å–µ–∫")
                        }
                    }
                    .filter { 
                        val isFuture = it.dt > now
                        Log.d(TAG, "–ü—Ä–æ–≥–Ω–æ–∑ dt=${it.dt}, –±—É–¥—É—â–µ–µ=$isFuture")
                        isFuture
                    }
                    .take(6) // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 6 –±—É–¥—É—â–∏—Ö —á–∞—Å–æ–≤

                Log.d(TAG, "–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: ${forecastItems.size}")

                withContext(Dispatchers.Main) {
                    forecastItems.forEachIndexed { index, forecast ->
                        val hourView = LayoutInflater.from(this@MainActivity).inflate( // —É–±—Ä–∞–ª–∏ context.
                            R.layout.item_hourly_forecast,
                            layout,
                            false // –¥–æ–±–∞–≤–∏–ª–∏ –∑–∞–ø—è—Ç—É—é
                        )

                        // –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ "–°–µ–π—á–∞—Å", –æ—Å—Ç–∞–ª—å–Ω—ã–µ - –≤—Ä–µ–º—è
                        val time = if (index == 0) "–°–µ–π—á–∞—Å" else formatTime(forecast.dt)
                        val temp = forecast.main.temp.toInt()
                        val icon = getWeatherIcon(forecast.weather.first().icon)

                        hourView.findViewById<TextView>(R.id.tvTime).text = time
                        hourView.findViewById<TextView>(R.id.tvHourlyTemp).text = "${temp}¬∞C" // –∏—Å–ø—Ä–∞–≤–∏–ª–∏ –∫–∞–≤—ã—á–∫–∏
                        hourView.findViewById<TextView>(R.id.tvWeatherIcon).text = icon

                        layout.addView(hourView) // —Å—Ç—Ä–æ—á–Ω–∞—è V
                    }
                }
            } catch (e: Exception) {
                e.printStackTrace()
                // –ù–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∂–∏—Ç–µ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
                withContext(Dispatchers.Main) {
                    setupDemoHourlyForecast() // –≤–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥
                }
            }
        }
    }

    private fun formatTime(timestamp: Long): String {
        val date = Date(timestamp * 1000)
        val format = SimpleDateFormat("HH:mm", Locale.getDefault())
        return format.format(date)
    }

    private fun getWeatherIcon(iconCode: String): String {
        return when (iconCode) {
            "01d" -> "‚òÄÔ∏è"
            "01n" -> "üåô"
            "02d" -> "‚õÖ"
            "02n" -> "‚òÅÔ∏è"
            "03d", "03n" -> "‚òÅÔ∏è"
            "04d", "04n" -> "‚òÅÔ∏è"
            "09d", "09n" -> "üå¶Ô∏è"
            "10d" -> "üåßÔ∏è"
            "10n" -> "üåßÔ∏è"
            "11d", "11n" -> "‚õàÔ∏è"
            "13d", "13n" -> "‚ùÑÔ∏è"
            "50d", "50n" -> "üå´Ô∏è"
            else -> "üå§Ô∏è"
        }
    }


    private fun tryLoadFromCache() {
        lifecycleScope.launch(Dispatchers.IO) {
            try {
                val selectedCity = Prefs.getSelectedCity(this@MainActivity, Constants.DEFAULT_CITY)
                val cachedWeather = database.weatherCacheDao().get(selectedCity)
                
                if (cachedWeather != null) {
                    Log.d(TAG, "üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞")
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—Å—Ç–∞—Ä–µ–ª –ª–∏ –∫—ç—à (–±–æ–ª–µ–µ 1 —á–∞—Å–∞)
                    val cacheAge = System.currentTimeMillis() - cachedWeather.timestamp
                    val cacheAgeMinutes = cacheAge / (1000 * 60)
                    
                    withContext(Dispatchers.Main) {
                        findViewById<TextView>(R.id.tvCity).text = "${cachedWeather.cityName} (–∫—ç—à)"
                        
                        val temp = if (useFahrenheit) celsiusToFahrenheit(cachedWeather.temperature) else cachedWeather.temperature
                        val feelsLike = if (useFahrenheit) celsiusToFahrenheit(cachedWeather.feelsLike) else cachedWeather.feelsLike
                        val unit = if (useFahrenheit) "¬∞F" else "¬∞C"
                        
                        findViewById<TextView>(R.id.tvTemperature).text = "${temp.toInt()}$unit"
                        findViewById<TextView>(R.id.tvFeelsLike).text = "–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ ${feelsLike.toInt()}$unit"
                        findViewById<TextView>(R.id.tvWeatherCondition).text = cachedWeather.weatherCondition
                        findViewById<TextView>(R.id.tvHumidity).text = "–í–ª–∞–∂–Ω–æ—Å—Ç—å: ${cachedWeather.humidity}%"
                        
                        val windSpeed = if (useMph) {
                            val mph = cachedWeather.windSpeed * 2.23694
                            String.format("%.1f", mph) + " –º–∏–ª—å/—á"
                        } else {
                            String.format("%.1f", cachedWeather.windSpeed) + " –º/—Å"
                        }
                        findViewById<TextView>(R.id.tvWind).text = "–í–µ—Ç–µ—Ä: $windSpeed"
                        
                        findViewById<TextView>(R.id.tvPrecipitation).text = "${cachedWeather.pressure} hPa"
                        
                        Toast.makeText(
                            this@MainActivity,
                            "–ü–æ–∫–∞–∑–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ ($cacheAgeMinutes –º–∏–Ω –Ω–∞–∑–∞–¥)",
                            Toast.LENGTH_LONG
                        ).show()
                    }
                } else {
                    Log.d(TAG, "‚ùå –ö—ç—à –ø—É—Å—Ç")
                    withContext(Dispatchers.Main) {
                        Toast.makeText(
                            this@MainActivity,
                            "–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É",
                            Toast.LENGTH_LONG
                        ).show()
                    }
                }
            } catch (e: Exception) {
                Log.e(TAG, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –∫—ç—à–∞: ${e.message}", e)
            }
        }
    }



    override fun onResume() {
        super.onResume()
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –≤ ProfileActivity)
        val oldFahrenheit = useFahrenheit
        val oldMph = useMph
        useFahrenheit = Prefs.getUseFahrenheit(this)
        useMph = Prefs.getUseMph(this)
        
        // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, –æ–±–Ω–æ–≤–ª—è–µ–º UI
        if (oldFahrenheit != useFahrenheit || oldMph != useMph) {
            currentWeather?.let { updateUIWithWeatherData(it) }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –Ω–∞ —ç–∫—Ä–∞–Ω
        val navView = findViewById<NavigationView>(R.id.nav_view)
        loadUserCitiesIntoMenu(navView)
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        val headerView = navView.getHeaderView(0)
        val tvUserName = headerView.findViewById<TextView>(R.id.tvUserName)
        val tvUserEmail = headerView.findViewById<TextView>(R.id.tvUserEmail)
        val tvAuthButton = headerView.findViewById<TextView>(R.id.tvAuthButton)
        updateUserUI(tvUserName, tvUserEmail, tvAuthButton)
    }

    private fun saveMoodRating(rating: Float) {
        lifecycleScope.launch(Dispatchers.IO) {
            try {
                // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                val currentUser = userManager.getCurrentUser()
                val userId = currentUser?.userId ?: "anonymous"
                
                // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –∏ –≥–æ—Ä–æ–¥
                val currentCity = Prefs.getSelectedCity(this@MainActivity)
                
                val moodRating = MoodRatingEntity(
                    id = 0,
                    userId = userId,
                    rating = rating.toInt(),
                    weatherCondition = null,
                    temperature = null,
                    note = null,
                    cityId = currentCity
                )
                database.moodRatingDao().insert(moodRating)
                
                withContext(Dispatchers.Main) {
                    Toast.makeText(this@MainActivity, "–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!", Toast.LENGTH_SHORT).show()
                }
            } catch (e: Exception) {
                withContext(Dispatchers.Main) {
                    Toast.makeText(this@MainActivity, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${e.message}", Toast.LENGTH_SHORT).show()
                }
            }
        }
    }

    override fun onNavigationItemSelected(item: MenuItem): Boolean {
        when (item.itemId) {
            R.id.nav_mood_history -> {
                startActivity(Intent(this, com.example.weathermood.ui.MoodHistoryActivity::class.java))
            }
            R.id.nav_settings -> {
                startActivity(Intent(this, com.example.weathermood.ui.ProfileActivity::class.java))
            }
            R.id.nav_share -> {
                Toast.makeText(this, "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ø–æ–≥–æ–¥–æ–π", Toast.LENGTH_SHORT).show()
            }
            R.id.nav_rate -> {
                Toast.makeText(this, "–û—Ü–µ–Ω–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", Toast.LENGTH_SHORT).show()
            }
        }
        drawerLayout.closeDrawer(GravityCompat.START)
        return true
    }

    override fun onBackPressed() {
        if (drawerLayout.isDrawerOpen(GravityCompat.START)) {
            drawerLayout.closeDrawer(GravityCompat.START)
        } else {
            super.onBackPressed()
        }
    }
    
    private fun showWeatherDetailsDialog(weather: WeatherResponse) {
        val dialogView = LayoutInflater.from(this).inflate(R.layout.dialog_weather_details, null)
        
        // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è (0 - –≤—á–µ—Ä–∞, 1 - —Å–µ–≥–æ–¥–Ω—è, 2 - –∑–∞–≤—Ç—Ä–∞)
        var selectedDay = 1
        
        // –°—Å—ã–ª–∫–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏
        val btnYesterday = dialogView.findViewById<TextView>(R.id.btnYesterday)
        val btnToday = dialogView.findViewById<TextView>(R.id.btnToday)
        val btnTomorrow = dialogView.findViewById<TextView>(R.id.btnTomorrow)
        
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è
        fun updateDialogData(dayOffset: Int) {
            selectedDay = dayOffset
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª—å –∫–Ω–æ–ø–æ–∫
            btnYesterday.alpha = if (dayOffset == 0) 1.0f else 0.6f
            btnYesterday.setTextColor(if (dayOffset == 0) 0xFFFFFFFF.toInt() else 0xFFFFFFFF.toInt())
            btnYesterday.setBackgroundColor(if (dayOffset == 0) 0x40FFFFFF.toInt() else 0x00000000.toInt())
            btnYesterday.setTypeface(null, if (dayOffset == 0) android.graphics.Typeface.BOLD else android.graphics.Typeface.NORMAL)
            
            btnToday.alpha = if (dayOffset == 1) 1.0f else 0.6f
            btnToday.setTextColor(if (dayOffset == 1) 0xFFFFFFFF.toInt() else 0xFFFFFFFF.toInt())
            btnToday.setBackgroundColor(if (dayOffset == 1) 0x40FFFFFF.toInt() else 0x00000000.toInt())
            btnToday.setTypeface(null, if (dayOffset == 1) android.graphics.Typeface.BOLD else android.graphics.Typeface.NORMAL)
            
            btnTomorrow.alpha = if (dayOffset == 2) 1.0f else 0.6f
            btnTomorrow.setTextColor(if (dayOffset == 2) 0xFFFFFFFF.toInt() else 0xFFFFFFFF.toInt())
            btnTomorrow.setBackgroundColor(if (dayOffset == 2) 0x40FFFFFF.toInt() else 0x00000000.toInt())
            btnTomorrow.setTypeface(null, if (dayOffset == 2) android.graphics.Typeface.BOLD else android.graphics.Typeface.NORMAL)
            
            // –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è
            val calendar = java.util.Calendar.getInstance()
            calendar.add(java.util.Calendar.DAY_OF_YEAR, dayOffset - 1) // -1 –¥–ª—è –≤—á–µ—Ä–∞, 0 –¥–ª—è —Å–µ–≥–æ–¥–Ω—è, +1 –¥–ª—è –∑–∞–≤—Ç—Ä–∞
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É
            val dateFormat = SimpleDateFormat("EEEE, d MMMM yyyy", Locale("ru"))
            dialogView.findViewById<TextView>(R.id.dialogDate).text = dateFormat.format(calendar.time)
            
            // –ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –∏ –∏–∫–æ–Ω–∫–∞
            val weatherCondition = weather.weather.firstOrNull()
            val conditionText: String
            val weatherIcon: String
            
            if (weatherCondition != null) {
                when(weatherCondition.main.lowercase()) {
                    "clear" -> {
                        conditionText = "–Ø—Å–Ω–æ"
                        weatherIcon = "‚òÄÔ∏è"
                    }
                    "clouds" -> {
                        conditionText = "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å"
                        weatherIcon = "‚õÖ"
                    }
                    "rain" -> {
                        conditionText = "–î–æ–∂–¥—å"
                        weatherIcon = "üåßÔ∏è"
                    }
                    "snow" -> {
                        conditionText = "–°–Ω–µ–≥"
                        weatherIcon = "‚ùÑÔ∏è"
                    }
                    "thunderstorm" -> {
                        conditionText = "–ì—Ä–æ–∑–∞"
                        weatherIcon = "‚õàÔ∏è"
                    }
                    "drizzle" -> {
                        conditionText = "–ú–æ—Ä–æ—Å—å"
                        weatherIcon = "üå¶Ô∏è"
                    }
                    else -> {
                        conditionText = weatherCondition.description ?: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                        weatherIcon = "üå§Ô∏è"
                    }
                }
            } else {
                conditionText = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                weatherIcon = "üå§Ô∏è"
            }
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ–≥–æ–¥—ã
            dialogView.findViewById<TextView>(R.id.dialogWeatherCondition).text = conditionText.replaceFirstChar { 
                if (it.isLowerCase()) it.titlecase(Locale.getDefault()) else it.toString() 
            }
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫—É –ø–æ–≥–æ–¥—ã
            dialogView.findViewById<TextView>(R.id.dialogWeatherIcon).text = weatherIcon
            
            // –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (—Å –Ω–µ–±–æ–ª—å—à–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –¥–Ω–µ–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
            val tempOffset = when(dayOffset) {
                0 -> -2.0 // –í—á–µ—Ä–∞ –±—ã–ª–æ –Ω–∞ 2 –≥—Ä–∞–¥—É—Å–∞ —Ö–æ–ª–æ–¥–Ω–µ–µ
                2 -> 1.0  // –ó–∞–≤—Ç—Ä–∞ –±—É–¥–µ—Ç –Ω–∞ 1 –≥—Ä–∞–¥—É—Å —Ç–µ–ø–ª–µ–µ
                else -> 0.0
            }
            val adjustedTemp = weather.main.temp + tempOffset
            val temp = if (useFahrenheit) celsiusToFahrenheit(adjustedTemp) else adjustedTemp
            dialogView.findViewById<TextView>(R.id.dialogTempCelsius).text = "${temp.toInt()}¬∞"
            
            // –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ (—Å —É—á–µ—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫ mph/m/s)
            if (useMph) {
                val mph = weather.wind.speed * 2.23694
                dialogView.findViewById<TextView>(R.id.dialogWindSpeed).text = "${mph.toInt()} –º–∏–ª—å/—á"
            } else {
                val kmh = weather.wind.speed * 3.6
                dialogView.findViewById<TextView>(R.id.dialogWindSpeed).text = "${kmh.toInt()} –∫–º/—á"
            }
            
            // –£–§ –∏–Ω–¥–µ–∫—Å (–∑–∞–≥–ª—É—à–∫–∞)
            dialogView.findViewById<TextView>(R.id.dialogUvIndex).text = "0.2"
            
            // –í–ª–∞–∂–Ω–æ—Å—Ç—å (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤)
            dialogView.findViewById<TextView>(R.id.dialogPrecipitation).text = "${weather.main.humidity}%"
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫
        btnYesterday.setOnClickListener { updateDialogData(0) }
        btnToday.setOnClickListener { updateDialogData(1) }
        btnTomorrow.setOnClickListener { updateDialogData(2) }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥ —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è "–°–µ–≥–æ–¥–Ω—è"
        updateDialogData(1)
        
        // –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
        androidx.appcompat.app.AlertDialog.Builder(this)
            .setView(dialogView)
            .setCancelable(true)
            .show()
    }

    data class ForecastHour(val time: String, val temperature: Int, val icon: String)
}